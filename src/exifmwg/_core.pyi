import os
import pathlib
from collections.abc import Sequence

class ImageMetadata:
    def __init__(
        self,
        SourceFile: str | os.PathLike,
        ImageHeight: int,
        ImageWidth: int,
        Title: str | None = None,
        Description: str | None = None,
        RegionInfo: RegionInfoStruct | None = None,
        Orientation: int | None = None,
        LastKeywordXMP: Sequence[str] | None = None,
        TagsList: Sequence[str] | None = None,
        CatalogSets: Sequence[str] | None = None,
        HierarchicalSubject: Sequence[str] | None = None,
        KeywordInfo: KeywordInfoModel | None = None,
        Country: str | None = None,
        City: str | None = None,
        State: str | None = None,
        Location: str | None = None,
    ) -> None: ...
    @property
    def SourceFile(self) -> pathlib.Path: ...
    @SourceFile.setter
    def SourceFile(self, arg: str | os.PathLike, /) -> None: ...
    @property
    def ImageHeight(self) -> int: ...
    @ImageHeight.setter
    def ImageHeight(self, arg: int, /) -> None: ...
    @property
    def ImageWidth(self) -> int: ...
    @ImageWidth.setter
    def ImageWidth(self, arg: int, /) -> None: ...
    @property
    def Title(self) -> str | None: ...
    @Title.setter
    def Title(self, arg: str, /) -> None: ...
    @property
    def Description(self) -> str | None: ...
    @Description.setter
    def Description(self, arg: str, /) -> None: ...
    @property
    def RegionInfo(self) -> RegionInfoStruct | None: ...
    @RegionInfo.setter
    def RegionInfo(self, arg: RegionInfoStruct, /) -> None: ...
    @property
    def Orientation(self) -> int | None: ...
    @Orientation.setter
    def Orientation(self, arg: int, /) -> None: ...
    @property
    def LastKeywordXMP(self) -> list[str] | None: ...
    @LastKeywordXMP.setter
    def LastKeywordXMP(self, arg: Sequence[str], /) -> None: ...
    @property
    def TagsList(self) -> list[str] | None: ...
    @TagsList.setter
    def TagsList(self, arg: Sequence[str], /) -> None: ...
    @property
    def CatalogSets(self) -> list[str] | None: ...
    @CatalogSets.setter
    def CatalogSets(self, arg: Sequence[str], /) -> None: ...
    @property
    def HierarchicalSubject(self) -> list[str] | None: ...
    @HierarchicalSubject.setter
    def HierarchicalSubject(self, arg: Sequence[str], /) -> None: ...
    @property
    def KeywordInfo(self) -> KeywordInfoModel | None: ...
    @KeywordInfo.setter
    def KeywordInfo(self, arg: KeywordInfoModel, /) -> None: ...
    @property
    def Country(self) -> str | None: ...
    @Country.setter
    def Country(self, arg: str, /) -> None: ...
    @property
    def City(self) -> str | None: ...
    @City.setter
    def City(self, arg: str, /) -> None: ...
    @property
    def State(self) -> str | None: ...
    @State.setter
    def State(self, arg: str, /) -> None: ...
    @property
    def Location(self) -> str | None: ...
    @Location.setter
    def Location(self, arg: str, /) -> None: ...

class XmpAreaStruct:
    def __init__(self, H: float, W: float, X: float, Y: float, Unit: str, D: float | None = None) -> None: ...
    @property
    def H(self) -> float: ...
    @H.setter
    def H(self, arg: float, /) -> None: ...
    @property
    def W(self) -> float: ...
    @W.setter
    def W(self, arg: float, /) -> None: ...
    @property
    def X(self) -> float: ...
    @X.setter
    def X(self, arg: float, /) -> None: ...
    @property
    def Y(self) -> float: ...
    @Y.setter
    def Y(self, arg: float, /) -> None: ...
    @property
    def D(self) -> float | None: ...
    @D.setter
    def D(self, arg: float, /) -> None: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, arg: str, /) -> None: ...

class DimensionsStruct:
    def __init__(self, H: float, W: float, Unit: str) -> None: ...
    @property
    def H(self) -> float: ...
    @H.setter
    def H(self, arg: float, /) -> None: ...
    @property
    def W(self) -> float: ...
    @W.setter
    def W(self, arg: float, /) -> None: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, arg: str, /) -> None: ...

class RegionStruct:
    def __init__(self, Area: XmpAreaStruct, Name: str, Type: str, Description: str | None = None) -> None: ...
    @property
    def Area(self) -> XmpAreaStruct: ...
    @Area.setter
    def Area(self, arg: XmpAreaStruct, /) -> None: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, arg: str, /) -> None: ...
    @property
    def Type(self) -> str: ...
    @Type.setter
    def Type(self, arg: str, /) -> None: ...
    @property
    def Description(self) -> str | None: ...
    @Description.setter
    def Description(self, arg: str, /) -> None: ...

class RegionInfoStruct:
    def __init__(self, AppliedToDimensions: DimensionsStruct, RegionList: Sequence[RegionStruct]) -> None: ...
    @property
    def AppliedToDimensions(self) -> DimensionsStruct: ...
    @AppliedToDimensions.setter
    def AppliedToDimensions(self, arg: DimensionsStruct, /) -> None: ...
    @property
    def RegionList(self) -> list[RegionStruct]: ...
    @RegionList.setter
    def RegionList(self, arg: Sequence[RegionStruct], /) -> None: ...

class KeywordStruct:
    def __init__(self, Keyword: str, Children: Sequence[KeywordStruct], Applied: bool | None = None) -> None: ...
    @property
    def Keyword(self) -> str: ...
    @Keyword.setter
    def Keyword(self, arg: str, /) -> None: ...
    @property
    def Applied(self) -> bool | None: ...
    @Applied.setter
    def Applied(self, arg: bool, /) -> None: ...
    @property
    def Children(self) -> list[KeywordStruct]: ...
    @Children.setter
    def Children(self, arg: Sequence[KeywordStruct], /) -> None: ...

class KeywordInfoModel:
    def __init__(self, Hierarchy: Sequence[KeywordStruct]) -> None: ...
    @property
    def Hierarchy(self) -> list[KeywordStruct]: ...
    @Hierarchy.setter
    def Hierarchy(self, arg: Sequence[KeywordStruct], /) -> None: ...

def read_metadata(arg: str | os.PathLike, /) -> ImageMetadata:
    """Read metadata from an image file"""

def write_metadata(arg: ImageMetadata, /) -> None:
    """Write metadata to an image file"""

def clear_existing_metadata(arg: str | os.PathLike, /) -> None:
    """Clear existing metadata from an image file"""
