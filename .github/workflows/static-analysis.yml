name: Static Analysis
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build clang clang-tidy clang-tools python3-dev valgrind cppcheck ccache # Add ccache
      - name: Configure ccache
        run: |
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=500M" >> $GITHUB_ENV
          echo "CCACHE_COMPILERCHECK=content" >> $GITHUB_ENV
      - name: Cache ccache directory
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-static-analysis-${{ github.sha }} # Unique key for static analysis
          restore-keys: |
            ${{ runner.os }}-ccache-static-analysis-
      - name: Print ccache statistics (before build)
        run: ccache -s
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nanobind~=2.7.0
      - name: Run cppcheck
        run: |
          cppcheck --enable=all \
            --inconclusive \
            --xml \
            --xml-version=2 \
            --output-file=cppcheck-results.xml \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            src/ 2>&1 || true
          # Generate HTML report
          cppcheck-htmlreport \
            --file=cppcheck-results.xml \
            --report-dir=cppcheck-html/ \
            --source-dir=. || true
      - name: Configure with static analysis
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_TESTING=ON \
            -DENABLE_CLANG_TIDY=ON \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -G Ninja \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache # Integrate ccache
      - name: Build and run clang-tidy
        run: ninja -C build/
      - name: Print ccache statistics (after clang-tidy build)
        run: ccache -s
      - name: Run static analyzer
        run: |
          scan-build -o analyzer-results \
            --status-bugs \
            --html-title="Static Analysis Results" \
            cmake --build build/ --clean-first
      - name: Print ccache statistics (after scan-build)
        run: ccache -s
      - name: Run Valgrind on unit tests
        run: |
          valgrind --tool=memcheck \
            --leak-check=full \
            --show-leak-kinds=all \
            --track-origins=yes \
            --xml=yes \
            --xml-file="valgrind-unit-tests.xml" \
            build/tests/unit/tests || true
      - name: Upload all results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: all-analysis-results
          path: |
            analyzer-results/
            cppcheck-results.xml
            cppcheck-html/
            valgrind-unit-tests.xml
            build/compile_commands.json
